{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Problem Statement\n",
    "\n",
    "Congratulations – you have been hired as Chief Data Scientist of MedCamp – a not for profit organization dedicated in making health conditions for working professionals better. MedCamp was started because the founders saw their family suffer due to bad work life balance and neglected health.\n",
    "\n",
    "MedCamp organizes health camps in several cities with low work life balance. They reach out to working people and ask them to register for these health camps. For those who attend, MedCamp provides them facility to undergo health checks or increase awareness by visiting various stalls (depending on the format of camp). \n",
    "\n",
    "MedCamp has conducted 65 such events over a period of 4 years and they see a high drop off between “Registration” and Number of people taking tests at the Camps. In last 4 years, they have stored data of ~110,000 registrations they have done.\n",
    "\n",
    "One of the huge costs in arranging these camps is the amount of inventory you need to carry. If you carry more than required inventory, you incur unnecessarily high costs. On the other hand, if you carry less than required inventory for conducting these medical checks, people end up having bad experience.\n",
    "\n",
    "The Process:\n",
    "\n",
    "MedCamp employees / volunteers reach out to people and drive registrations.\n",
    "During the camp, People who “ShowUp” either undergo the medical tests or visit stalls depending on the format of health camp.\n",
    " \n",
    "\n",
    "Other things to note:\n",
    "\n",
    "Since this is a completely voluntary activity for the working professionals, MedCamp usually has little profile information about these people.\n",
    "For a few camps, there was hardware failure, so some information about date and time of registration is lost.\n",
    "MedCamp runs 3 formats of these camps. The first and second format provides people with an instantaneous health score. The third format provides information about several health issues through various awareness stalls.\n",
    "\n",
    "Favorable outcome:\n",
    "\n",
    "For the first 2 formats, a favourable outcome is defined as getting a health_score, while in the third format it is defined as visiting at least a stall.\n",
    "You need to predict the chances (probability) of having a favourable outcome.\n",
    "\n",
    "Target variable\n",
    "Health_score(F1),Health_score(F2),Chances of visiting\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd \n",
    "import numpy as np \n",
    "import matplotlib.pyplot  as plt \n",
    "import seaborn as sns\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [],
   "source": [
    "train=pd.read_csv(r\"/Users/vivekrajashekaran/Downloads/Train/Train.csv\")\n",
    "test=pd.read_csv(r\"/Users/vivekrajashekaran/Downloads/test_l0Auv8Q.csv\")\n",
    "fhc=pd.read_csv(r\"/Users/vivekrajashekaran/Downloads/Train/First_Health_Camp_Attended.csv\")\n",
    "shc=pd.read_csv(r\"/Users/vivekrajashekaran/Downloads/Train/Second_Health_Camp_Attended.csv\")\n",
    "thc=pd.read_csv(r\"/Users/vivekrajashekaran/Downloads/Train/Third_Health_Camp_Attended.csv\")\n",
    "patient=pd.read_csv(r\"/Users/vivekrajashekaran/Downloads/Train/Patient_Profile.csv\")\n",
    "health_camp=pd.read_csv(r\"/Users/vivekrajashekaran/Downloads/Train/Health_Camp_Detail.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will combine train and test and then map all the remaining data with combined data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((75278, 8), (35249, 8), (110527, 8))"
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combined=pd.concat([train,test],ignore_index=True)\n",
    "train.shape,test.shape,combined.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Patient_ID', 'Health_Camp_ID', 'Registration_Date', 'Var1', 'Var2',\n",
       "       'Var3', 'Var4', 'Var5'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 134,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combined.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Merging the columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [],
   "source": [
    "#patients\n",
    "combined=pd.merge(combined,patient,on=[\"Patient_ID\"],how=\"left\")\n",
    "\n",
    "#fhc\n",
    "combined=pd.merge(combined,fhc,on=[\"Patient_ID\",\"Health_Camp_ID\"],how=\"left\")\n",
    "\n",
    "#second health camp\n",
    "combined=pd.merge(combined,shc,on=[\"Patient_ID\",\"Health_Camp_ID\"],how=\"left\")\n",
    "\n",
    "#Third health camp\n",
    "combined=pd.merge(combined,thc,on=[\"Patient_ID\",\"Health_Camp_ID\"],how=\"left\")\n",
    "\n",
    "#health camp\n",
    "combined=pd.merge(combined,health_camp,on=[\"Health_Camp_ID\"],how=\"left\")\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "deleting the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [],
   "source": [
    "del health_camp,fhc,shc,thc,patient"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Understanding the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(110527, 29)"
      ]
     },
     "execution_count": 137,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "##Shape of the data\n",
    "combined.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Patient_ID                        0\n",
       "Health_Camp_ID                    0\n",
       "Registration_Date               334\n",
       "Var1                              0\n",
       "Var2                              0\n",
       "Var3                              0\n",
       "Var4                              0\n",
       "Var5                              0\n",
       "Online_Follower                   0\n",
       "LinkedIn_Shared                   0\n",
       "Twitter_Shared                    0\n",
       "Facebook_Shared                   0\n",
       "Income                        81342\n",
       "Education_Score               98167\n",
       "Age                           77925\n",
       "First_Interaction                 0\n",
       "City_Type                     46602\n",
       "Employer_Category             90963\n",
       "Donation                     104309\n",
       "Health_Score                 104309\n",
       "Unnamed: 4                   110527\n",
       "Health Score                 102708\n",
       "Number_of_stall_visited      104012\n",
       "Last_Stall_Visited_Number    104012\n",
       "Camp_Start_Date                   0\n",
       "Camp_End_Date                     0\n",
       "Category1                         0\n",
       "Category2                         0\n",
       "Category3                         0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 138,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## Null values\n",
    "combined.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Patient_ID</th>\n",
       "      <th>Health_Camp_ID</th>\n",
       "      <th>Registration_Date</th>\n",
       "      <th>Var1</th>\n",
       "      <th>Var2</th>\n",
       "      <th>Var3</th>\n",
       "      <th>Var4</th>\n",
       "      <th>Var5</th>\n",
       "      <th>Online_Follower</th>\n",
       "      <th>LinkedIn_Shared</th>\n",
       "      <th>...</th>\n",
       "      <th>Health_Score</th>\n",
       "      <th>Unnamed: 4</th>\n",
       "      <th>Health Score</th>\n",
       "      <th>Number_of_stall_visited</th>\n",
       "      <th>Last_Stall_Visited_Number</th>\n",
       "      <th>Camp_Start_Date</th>\n",
       "      <th>Camp_End_Date</th>\n",
       "      <th>Category1</th>\n",
       "      <th>Category2</th>\n",
       "      <th>Category3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>149</th>\n",
       "      <td>504247</td>\n",
       "      <td>6554</td>\n",
       "      <td>28-May-05</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>19-Jun-05</td>\n",
       "      <td>01-Jul-05</td>\n",
       "      <td>First</td>\n",
       "      <td>B</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>151</th>\n",
       "      <td>524018</td>\n",
       "      <td>6538</td>\n",
       "      <td>10-Aug-04</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>09-Jan-04</td>\n",
       "      <td>04-Feb-05</td>\n",
       "      <td>First</td>\n",
       "      <td>F</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>170</th>\n",
       "      <td>522538</td>\n",
       "      <td>6538</td>\n",
       "      <td>28-Nov-04</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>09-Jan-04</td>\n",
       "      <td>04-Feb-05</td>\n",
       "      <td>First</td>\n",
       "      <td>F</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>213</th>\n",
       "      <td>501155</td>\n",
       "      <td>6535</td>\n",
       "      <td>31-Jan-04</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>01-Feb-04</td>\n",
       "      <td>18-Feb-04</td>\n",
       "      <td>First</td>\n",
       "      <td>E</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>236</th>\n",
       "      <td>496296</td>\n",
       "      <td>6562</td>\n",
       "      <td>12-Jan-05</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>24-Nov-04</td>\n",
       "      <td>02-Jun-05</td>\n",
       "      <td>First</td>\n",
       "      <td>F</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110522</th>\n",
       "      <td>507261</td>\n",
       "      <td>6525</td>\n",
       "      <td>13-Apr-06</td>\n",
       "      <td>12</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>08-Apr-06</td>\n",
       "      <td>17-Apr-06</td>\n",
       "      <td>First</td>\n",
       "      <td>C</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110523</th>\n",
       "      <td>513607</td>\n",
       "      <td>6551</td>\n",
       "      <td>03-Nov-06</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>13-Nov-06</td>\n",
       "      <td>18-Nov-06</td>\n",
       "      <td>Second</td>\n",
       "      <td>D</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110524</th>\n",
       "      <td>498160</td>\n",
       "      <td>6584</td>\n",
       "      <td>17-Jun-06</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>04-Aug-06</td>\n",
       "      <td>09-Aug-06</td>\n",
       "      <td>Second</td>\n",
       "      <td>A</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110525</th>\n",
       "      <td>502444</td>\n",
       "      <td>6567</td>\n",
       "      <td>13-Jan-07</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30-Jan-07</td>\n",
       "      <td>04-Feb-07</td>\n",
       "      <td>Second</td>\n",
       "      <td>D</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110526</th>\n",
       "      <td>523811</td>\n",
       "      <td>6584</td>\n",
       "      <td>16-Jun-06</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>04-Aug-06</td>\n",
       "      <td>09-Aug-06</td>\n",
       "      <td>Second</td>\n",
       "      <td>A</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>73835 rows × 29 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Patient_ID  Health_Camp_ID Registration_Date  Var1  Var2  Var3  Var4  \\\n",
       "149         504247            6554         28-May-05     0     0     0     0   \n",
       "151         524018            6538         10-Aug-04     0     0     0     0   \n",
       "170         522538            6538         28-Nov-04     0     0     0     0   \n",
       "213         501155            6535         31-Jan-04     0     0     0     0   \n",
       "236         496296            6562         12-Jan-05     0     0     0     0   \n",
       "...            ...             ...               ...   ...   ...   ...   ...   \n",
       "110522      507261            6525         13-Apr-06    12     2     0     0   \n",
       "110523      513607            6551         03-Nov-06     0     0     0     0   \n",
       "110524      498160            6584         17-Jun-06     0     0     0     0   \n",
       "110525      502444            6567         13-Jan-07     0     0     0     0   \n",
       "110526      523811            6584         16-Jun-06     4     3     0     2   \n",
       "\n",
       "        Var5  Online_Follower  LinkedIn_Shared  ...  Health_Score  Unnamed: 4  \\\n",
       "149        0                0                0  ...           NaN         NaN   \n",
       "151        0                0                0  ...           NaN         NaN   \n",
       "170        0                0                0  ...           NaN         NaN   \n",
       "213        0                0                0  ...           NaN         NaN   \n",
       "236        0                0                0  ...           NaN         NaN   \n",
       "...      ...              ...              ...  ...           ...         ...   \n",
       "110522     6                0                0  ...           NaN         NaN   \n",
       "110523     0                0                0  ...           NaN         NaN   \n",
       "110524     0                0                0  ...           NaN         NaN   \n",
       "110525     0                0                0  ...           NaN         NaN   \n",
       "110526     4                0                0  ...           NaN         NaN   \n",
       "\n",
       "        Health Score  Number_of_stall_visited  Last_Stall_Visited_Number  \\\n",
       "149              NaN                      NaN                        NaN   \n",
       "151              NaN                      NaN                        NaN   \n",
       "170              NaN                      NaN                        NaN   \n",
       "213              NaN                      NaN                        NaN   \n",
       "236              NaN                      NaN                        NaN   \n",
       "...              ...                      ...                        ...   \n",
       "110522           NaN                      NaN                        NaN   \n",
       "110523           NaN                      NaN                        NaN   \n",
       "110524           NaN                      NaN                        NaN   \n",
       "110525           NaN                      NaN                        NaN   \n",
       "110526           NaN                      NaN                        NaN   \n",
       "\n",
       "       Camp_Start_Date Camp_End_Date Category1  Category2  Category3  \n",
       "149          19-Jun-05     01-Jul-05     First          B          2  \n",
       "151          09-Jan-04     04-Feb-05     First          F          2  \n",
       "170          09-Jan-04     04-Feb-05     First          F          2  \n",
       "213          01-Feb-04     18-Feb-04     First          E          2  \n",
       "236          24-Nov-04     02-Jun-05     First          F          2  \n",
       "...                ...           ...       ...        ...        ...  \n",
       "110522       08-Apr-06     17-Apr-06     First          C          2  \n",
       "110523       13-Nov-06     18-Nov-06    Second          D          2  \n",
       "110524       04-Aug-06     09-Aug-06    Second          A          2  \n",
       "110525       30-Jan-07     04-Feb-07    Second          D          2  \n",
       "110526       04-Aug-06     09-Aug-06    Second          A          2  \n",
       "\n",
       "[73835 rows x 29 columns]"
      ]
     },
     "execution_count": 139,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "##Duplicate rows\n",
    "combined[combined.duplicated(subset=\"Patient_ID\")]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Patient_ID</th>\n",
       "      <th>Health_Camp_ID</th>\n",
       "      <th>Registration_Date</th>\n",
       "      <th>Var1</th>\n",
       "      <th>Var2</th>\n",
       "      <th>Var3</th>\n",
       "      <th>Var4</th>\n",
       "      <th>Var5</th>\n",
       "      <th>Online_Follower</th>\n",
       "      <th>LinkedIn_Shared</th>\n",
       "      <th>...</th>\n",
       "      <th>Health_Score</th>\n",
       "      <th>Unnamed: 4</th>\n",
       "      <th>Health Score</th>\n",
       "      <th>Number_of_stall_visited</th>\n",
       "      <th>Last_Stall_Visited_Number</th>\n",
       "      <th>Camp_Start_Date</th>\n",
       "      <th>Camp_End_Date</th>\n",
       "      <th>Category1</th>\n",
       "      <th>Category2</th>\n",
       "      <th>Category3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>489652</td>\n",
       "      <td>6578</td>\n",
       "      <td>10-Sep-05</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>16-Aug-05</td>\n",
       "      <td>14-Oct-05</td>\n",
       "      <td>Third</td>\n",
       "      <td>G</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>507246</td>\n",
       "      <td>6578</td>\n",
       "      <td>18-Aug-05</td>\n",
       "      <td>45</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>16-Aug-05</td>\n",
       "      <td>14-Oct-05</td>\n",
       "      <td>Third</td>\n",
       "      <td>G</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>523729</td>\n",
       "      <td>6534</td>\n",
       "      <td>29-Apr-06</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.402054</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>17-Oct-05</td>\n",
       "      <td>07-Nov-07</td>\n",
       "      <td>Second</td>\n",
       "      <td>A</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>524931</td>\n",
       "      <td>6535</td>\n",
       "      <td>07-Feb-04</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>01-Feb-04</td>\n",
       "      <td>18-Feb-04</td>\n",
       "      <td>First</td>\n",
       "      <td>E</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>521364</td>\n",
       "      <td>6529</td>\n",
       "      <td>28-Feb-06</td>\n",
       "      <td>15</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.845597</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30-Mar-06</td>\n",
       "      <td>03-Apr-06</td>\n",
       "      <td>Second</td>\n",
       "      <td>A</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 29 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Patient_ID  Health_Camp_ID Registration_Date  Var1  Var2  Var3  Var4  Var5  \\\n",
       "0      489652            6578         10-Sep-05     4     0     0     0     2   \n",
       "1      507246            6578         18-Aug-05    45     5     0     0     7   \n",
       "2      523729            6534         29-Apr-06     0     0     0     0     0   \n",
       "3      524931            6535         07-Feb-04     0     0     0     0     0   \n",
       "4      521364            6529         28-Feb-06    15     1     0     0     7   \n",
       "\n",
       "   Online_Follower  LinkedIn_Shared  ...  Health_Score  Unnamed: 4  \\\n",
       "0                0                0  ...           NaN         NaN   \n",
       "1                0                0  ...           NaN         NaN   \n",
       "2                0                0  ...           NaN         NaN   \n",
       "3                0                0  ...           NaN         NaN   \n",
       "4                0                0  ...           NaN         NaN   \n",
       "\n",
       "   Health Score  Number_of_stall_visited  Last_Stall_Visited_Number  \\\n",
       "0           NaN                      2.0                        1.0   \n",
       "1           NaN                      NaN                        NaN   \n",
       "2      0.402054                      NaN                        NaN   \n",
       "3           NaN                      NaN                        NaN   \n",
       "4      0.845597                      NaN                        NaN   \n",
       "\n",
       "  Camp_Start_Date Camp_End_Date Category1  Category2  Category3  \n",
       "0       16-Aug-05     14-Oct-05     Third          G          2  \n",
       "1       16-Aug-05     14-Oct-05     Third          G          2  \n",
       "2       17-Oct-05     07-Nov-07    Second          A          2  \n",
       "3       01-Feb-04     18-Feb-04     First          E          2  \n",
       "4       30-Mar-06     03-Apr-06    Second          A          2  \n",
       "\n",
       "[5 rows x 29 columns]"
      ]
     },
     "execution_count": 140,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combined.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Changing the datatype of dates"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Registration date\n",
    "combined[\"Registration_Date\"]=pd.to_datetime(combined.Registration_Date,dayfirst=True)\n",
    "\n",
    "#First_Interaction \n",
    "combined[\"First_Interaction\"]=pd.to_datetime(combined.First_Interaction,dayfirst=True)\n",
    "\n",
    "#Camp_Start_Date \n",
    "combined[\"Camp_Start_Date\"]=pd.to_datetime(combined.Camp_Start_Date,dayfirst=True)\n",
    "\n",
    "#Camp_End_Date \n",
    "combined[\"Camp_End_Date\"]=pd.to_datetime(combined.Camp_End_Date,dayfirst=True)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 110527 entries, 0 to 110526\n",
      "Data columns (total 29 columns):\n",
      " #   Column                     Non-Null Count   Dtype         \n",
      "---  ------                     --------------   -----         \n",
      " 0   Patient_ID                 110527 non-null  int64         \n",
      " 1   Health_Camp_ID             110527 non-null  int64         \n",
      " 2   Registration_Date          110193 non-null  datetime64[ns]\n",
      " 3   Var1                       110527 non-null  int64         \n",
      " 4   Var2                       110527 non-null  int64         \n",
      " 5   Var3                       110527 non-null  int64         \n",
      " 6   Var4                       110527 non-null  int64         \n",
      " 7   Var5                       110527 non-null  int64         \n",
      " 8   Online_Follower            110527 non-null  int64         \n",
      " 9   LinkedIn_Shared            110527 non-null  int64         \n",
      " 10  Twitter_Shared             110527 non-null  int64         \n",
      " 11  Facebook_Shared            110527 non-null  int64         \n",
      " 12  Income                     29185 non-null   float64       \n",
      " 13  Education_Score            12360 non-null   float64       \n",
      " 14  Age                        32602 non-null   float64       \n",
      " 15  First_Interaction          110527 non-null  datetime64[ns]\n",
      " 16  City_Type                  63925 non-null   object        \n",
      " 17  Employer_Category          19564 non-null   object        \n",
      " 18  Donation                   6218 non-null    float64       \n",
      " 19  Health_Score               6218 non-null    float64       \n",
      " 20  Unnamed: 4                 0 non-null       float64       \n",
      " 21  Health Score               7819 non-null    float64       \n",
      " 22  Number_of_stall_visited    6515 non-null    float64       \n",
      " 23  Last_Stall_Visited_Number  6515 non-null    float64       \n",
      " 24  Camp_Start_Date            110527 non-null  datetime64[ns]\n",
      " 25  Camp_End_Date              110527 non-null  datetime64[ns]\n",
      " 26  Category1                  110527 non-null  object        \n",
      " 27  Category2                  110527 non-null  object        \n",
      " 28  Category3                  110527 non-null  int64         \n",
      "dtypes: datetime64[ns](4), float64(9), int64(12), object(4)\n",
      "memory usage: 24.5+ MB\n"
     ]
    }
   ],
   "source": [
    "combined.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Feature Engineering"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1)Extracting new features from date"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [],
   "source": [
    "##Registrion vs Interaction\n",
    "combined[\"Interaction_days\"]=(combined[\"Registration_Date\"]-combined[\"First_Interaction\"]).dt.days\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [],
   "source": [
    "#camp duration\n",
    "combined[\"Camp_duration\"]=(combined[\"Camp_End_Date\"]-combined[\"Camp_Start_Date\"]).dt.days"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Reg vs camp start date\n",
    "combined[\"Magic_1\"]=(combined[\"Camp_Start_Date\"]-combined[\"Registration_Date\"]).dt.days"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [],
   "source": [
    "##Active connnect\n",
    "combined[\"Active_connect\"]=(combined[\"Camp_End_Date\"]-combined[\"First_Interaction\"]).dt.days"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [],
   "source": [
    "##First interaction vs camp start date\n",
    "combined[\"Waiting_period\"]=(combined[\"Camp_Start_Date\"]-combined[\"First_Interaction\"]).dt.days"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "#camp end date -reg date\n",
    "combined[\"Magic_2\"]=(combined[\"Camp_End_Date\"]-combined[\"Registration_Date\"]).dt.days"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Patient_ID</th>\n",
       "      <th>Health_Camp_ID</th>\n",
       "      <th>Registration_Date</th>\n",
       "      <th>Var1</th>\n",
       "      <th>Var2</th>\n",
       "      <th>Var3</th>\n",
       "      <th>Var4</th>\n",
       "      <th>Var5</th>\n",
       "      <th>Online_Follower</th>\n",
       "      <th>LinkedIn_Shared</th>\n",
       "      <th>...</th>\n",
       "      <th>Camp_End_Date</th>\n",
       "      <th>Category1</th>\n",
       "      <th>Category2</th>\n",
       "      <th>Category3</th>\n",
       "      <th>Interaction_days</th>\n",
       "      <th>Camp_duration</th>\n",
       "      <th>Magic_1</th>\n",
       "      <th>Active_connect</th>\n",
       "      <th>Waiting_period</th>\n",
       "      <th>Magic_2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>489652</td>\n",
       "      <td>6578</td>\n",
       "      <td>2005-09-10</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>2005-10-14</td>\n",
       "      <td>Third</td>\n",
       "      <td>G</td>\n",
       "      <td>2</td>\n",
       "      <td>278.0</td>\n",
       "      <td>59</td>\n",
       "      <td>-25.0</td>\n",
       "      <td>312</td>\n",
       "      <td>253</td>\n",
       "      <td>34.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>507246</td>\n",
       "      <td>6578</td>\n",
       "      <td>2005-08-18</td>\n",
       "      <td>45</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>2005-10-14</td>\n",
       "      <td>Third</td>\n",
       "      <td>G</td>\n",
       "      <td>2</td>\n",
       "      <td>344.0</td>\n",
       "      <td>59</td>\n",
       "      <td>-2.0</td>\n",
       "      <td>401</td>\n",
       "      <td>342</td>\n",
       "      <td>57.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>523729</td>\n",
       "      <td>6534</td>\n",
       "      <td>2006-04-29</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>2007-11-07</td>\n",
       "      <td>Second</td>\n",
       "      <td>A</td>\n",
       "      <td>2</td>\n",
       "      <td>676.0</td>\n",
       "      <td>751</td>\n",
       "      <td>-194.0</td>\n",
       "      <td>1233</td>\n",
       "      <td>482</td>\n",
       "      <td>557.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>524931</td>\n",
       "      <td>6535</td>\n",
       "      <td>2004-02-07</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>2004-02-18</td>\n",
       "      <td>First</td>\n",
       "      <td>E</td>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>17</td>\n",
       "      <td>-6.0</td>\n",
       "      <td>11</td>\n",
       "      <td>-6</td>\n",
       "      <td>11.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>521364</td>\n",
       "      <td>6529</td>\n",
       "      <td>2006-02-28</td>\n",
       "      <td>15</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>2006-04-03</td>\n",
       "      <td>Second</td>\n",
       "      <td>A</td>\n",
       "      <td>2</td>\n",
       "      <td>970.0</td>\n",
       "      <td>4</td>\n",
       "      <td>30.0</td>\n",
       "      <td>1004</td>\n",
       "      <td>1000</td>\n",
       "      <td>34.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 35 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Patient_ID  Health_Camp_ID Registration_Date  Var1  Var2  Var3  Var4  Var5  \\\n",
       "0      489652            6578        2005-09-10     4     0     0     0     2   \n",
       "1      507246            6578        2005-08-18    45     5     0     0     7   \n",
       "2      523729            6534        2006-04-29     0     0     0     0     0   \n",
       "3      524931            6535        2004-02-07     0     0     0     0     0   \n",
       "4      521364            6529        2006-02-28    15     1     0     0     7   \n",
       "\n",
       "   Online_Follower  LinkedIn_Shared  ...  Camp_End_Date  Category1  Category2  \\\n",
       "0                0                0  ...     2005-10-14      Third          G   \n",
       "1                0                0  ...     2005-10-14      Third          G   \n",
       "2                0                0  ...     2007-11-07     Second          A   \n",
       "3                0                0  ...     2004-02-18      First          E   \n",
       "4                0                0  ...     2006-04-03     Second          A   \n",
       "\n",
       "   Category3  Interaction_days Camp_duration Magic_1 Active_connect  \\\n",
       "0          2             278.0            59   -25.0            312   \n",
       "1          2             344.0            59    -2.0            401   \n",
       "2          2             676.0           751  -194.0           1233   \n",
       "3          2               0.0            17    -6.0             11   \n",
       "4          2             970.0             4    30.0           1004   \n",
       "\n",
       "   Waiting_period  Magic_2  \n",
       "0             253     34.0  \n",
       "1             342     57.0  \n",
       "2             482    557.0  \n",
       "3              -6     11.0  \n",
       "4            1000     34.0  \n",
       "\n",
       "[5 rows x 35 columns]"
      ]
     },
     "execution_count": 149,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combined.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Patient_ID', 'Health_Camp_ID', 'Registration_Date', 'Var1', 'Var2',\n",
       "       'Var3', 'Var4', 'Var5', 'Online_Follower', 'LinkedIn_Shared',\n",
       "       'Twitter_Shared', 'Facebook_Shared', 'Income', 'Education_Score', 'Age',\n",
       "       'First_Interaction', 'City_Type', 'Employer_Category', 'Donation',\n",
       "       'Health_Score', 'Unnamed: 4', 'Health Score', 'Number_of_stall_visited',\n",
       "       'Last_Stall_Visited_Number', 'Camp_Start_Date', 'Camp_End_Date',\n",
       "       'Category1', 'Category2', 'Category3', 'Interaction_days',\n",
       "       'Camp_duration', 'Magic_1', 'Active_connect', 'Waiting_period',\n",
       "       'Magic_2'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 150,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combined.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2)online activity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {},
   "outputs": [],
   "source": [
    "#combining the online activity\n",
    "combined[\"Digital_marketing\"]=combined[\"Online_Follower\"]+combined[\"Twitter_Shared\"]+combined[\"Facebook_Shared\"]+\\\n",
    "combined[\"LinkedIn_Shared\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {},
   "outputs": [],
   "source": [
    "## dropping the columns\n",
    "combined.drop([\"Online_Follower\",\"Twitter_Shared\",\"Facebook_Shared\",\"LinkedIn_Shared\"],axis=1,inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "process:first interaction happens then the patient registers for the healthcamp\n",
    "\n",
    "He is informed about the camp start date and end date\n",
    "\n",
    "camp_end_date>camp_start_date>reg_date"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3)sequence"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {},
   "outputs": [],
   "source": [
    "def sequence(regn,start,end):\n",
    "    if(end>start>regn):\n",
    "        return 1\n",
    "    else:\n",
    "        return 0\n",
    "\n",
    "combined[\"comm_seq\"]=combined.apply(lambda x:sequence(x[\"Registration_Date\"],x[\"Camp_Start_Date\"],x[\"Camp_End_Date\"]),axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>proportion</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>comm_seq</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.586282</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.413718</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          proportion\n",
       "comm_seq            \n",
       "0           0.586282\n",
       "1           0.413718"
      ]
     },
     "execution_count": 154,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(combined[\"comm_seq\"].value_counts(normalize=True))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "4)Extracting days,month and year"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Registration date\n",
    "combined[\"Regn_day\"]=combined.Registration_Date.dt.day\n",
    "combined[\"Regn_month\"]=combined.Registration_Date.dt.month\n",
    "combined[\"Regn_year\"]=combined.Registration_Date.dt.year\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##How many patients registered every day,month,and year\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "metadata": {},
   "outputs": [],
   "source": [
    "#How many patients registered every month\n",
    "combined[\"Per_month_regn\"]=combined.groupby(\"Regn_month\")[\"Patient_ID\"].transform(\"nunique\")\n",
    "\n",
    "#How many patients registered every year\n",
    "combined[\"Per_year_regn\"]=combined.groupby(\"Regn_year\")[\"Patient_ID\"].transform(\"nunique\")\n",
    "\n",
    "#How many patients registered every day\n",
    "combined[\"Per_day_regn\"]=combined.groupby(\"Regn_day\")[\"Patient_ID\"].transform(\"nunique\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "metadata": {},
   "outputs": [],
   "source": [
    "#camp start date\n",
    "combined[\"CS_days\"]=combined[\"Camp_Start_Date\"].dt.day\n",
    "combined[\"CS_months\"]=combined[\"Camp_Start_Date\"].dt.month\n",
    "combined[\"CS_year\"]=combined[\"Camp_Start_Date\"].dt.year"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#How many health camps have been organized this year,month,days"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "metadata": {},
   "outputs": [],
   "source": [
    "#How many health camps organized every month\n",
    "combined[\"HC_PM\"]=combined.groupby(\"CS_months\")[\"Health_Camp_ID\"].transform(\"nunique\")\n",
    "\n",
    "##How many health camps organized every year\n",
    "combined[\"HC_year\"]=combined.groupby(\"CS_year\")[\"Health_Camp_ID\"].transform(\"nunique\")\n",
    "\n",
    "#How many health camps organized every day\n",
    "combined[\"HC_days\"]=combined.groupby(\"CS_days\")[\"Health_Camp_ID\"].transform(\"nunique\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {},
   "outputs": [],
   "source": [
    "#camp end date\n",
    "combined[\"CS_Edays\"]=combined[\"Camp_End_Date\"].dt.day\n",
    "combined[\"CS_Emonths\"]=combined[\"Camp_End_Date\"].dt.month\n",
    "combined[\"CS_Eyear\"]=combined[\"Camp_End_Date\"].dt.year"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {},
   "outputs": [],
   "source": [
    "combined[\"HC_EM\"]=combined.groupby(\"CS_Emonths\")[\"Health_Camp_ID\"].transform(\"nunique\")\n",
    "\n",
    "##How many health camps organized every year\n",
    "combined[\"HC_EYR\"]=combined.groupby(\"CS_Eyear\")[\"Health_Camp_ID\"].transform(\"nunique\")\n",
    "\n",
    "#How many health camps organized every day\n",
    "combined[\"HC_ED\"]=combined.groupby(\"CS_Edays\")[\"Health_Camp_ID\"].transform(\"nunique\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "How many healthcamps were organized for every patient..ie.. count of health camps\n",
    "\n",
    "How many patients appeared in health camp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {},
   "outputs": [],
   "source": [
    "#how many appeared in health camps\n",
    "combined[\"Patients_in_HC\"]=combined.groupby(\"Health_Camp_ID\")[\"Patient_ID\"].transform(\"nunique\")\n",
    "\n",
    "\n",
    "#how many health camps for every patients\n",
    "combined[\"HC_For_Patients\"]=combined.groupby(\"Patient_ID\")[\"Health_Camp_ID\"].transform(\"nunique\")\n",
    "\n",
    "#health camp count for patients\n",
    "combined[\"HCC_For_Patients\"]=combined.groupby(\"Patient_ID\")[\"Health_Camp_ID\"].transform(\"count\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Creating Target variable"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A favourable outcome is defined as getting a health_score while in third format it is defined as visiting atleast a stall"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {},
   "outputs": [],
   "source": [
    "def target(hs,hs_,stall_visit,last_stall_visited):\n",
    "    if(hs>0 or hs_>0 or stall_visit>0 or last_stall_visited>0):\n",
    "        return 1\n",
    "    else:\n",
    "        return 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {},
   "outputs": [],
   "source": [
    "combined[\"Target\"]=combined.apply(lambda x:target(x[\"Health_Score\"],x[\"Health Score\"],\n",
    "                                                  x[\"Number_of_stall_visited\"],\n",
    "                                                  x[\"Last_Stall_Visited_Number\"]),axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Target\n",
       "0    89993\n",
       "1    20534\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 164,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combined[\"Target\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Patient_ID</th>\n",
       "      <th>Health_Camp_ID</th>\n",
       "      <th>Registration_Date</th>\n",
       "      <th>Var1</th>\n",
       "      <th>Var2</th>\n",
       "      <th>Var3</th>\n",
       "      <th>Var4</th>\n",
       "      <th>Var5</th>\n",
       "      <th>Income</th>\n",
       "      <th>Education_Score</th>\n",
       "      <th>...</th>\n",
       "      <th>CS_Edays</th>\n",
       "      <th>CS_Emonths</th>\n",
       "      <th>CS_Eyear</th>\n",
       "      <th>HC_EM</th>\n",
       "      <th>HC_EYR</th>\n",
       "      <th>HC_ED</th>\n",
       "      <th>Patients_in_HC</th>\n",
       "      <th>HC_For_Patients</th>\n",
       "      <th>HCC_For_Patients</th>\n",
       "      <th>Target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>489652</td>\n",
       "      <td>6578</td>\n",
       "      <td>2005-09-10</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>14</td>\n",
       "      <td>10</td>\n",
       "      <td>2005</td>\n",
       "      <td>5</td>\n",
       "      <td>19</td>\n",
       "      <td>4</td>\n",
       "      <td>2837</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>507246</td>\n",
       "      <td>6578</td>\n",
       "      <td>2005-08-18</td>\n",
       "      <td>45</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>1.0</td>\n",
       "      <td>75.0</td>\n",
       "      <td>...</td>\n",
       "      <td>14</td>\n",
       "      <td>10</td>\n",
       "      <td>2005</td>\n",
       "      <td>5</td>\n",
       "      <td>19</td>\n",
       "      <td>4</td>\n",
       "      <td>2837</td>\n",
       "      <td>26</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>523729</td>\n",
       "      <td>6534</td>\n",
       "      <td>2006-04-29</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>7</td>\n",
       "      <td>11</td>\n",
       "      <td>2007</td>\n",
       "      <td>8</td>\n",
       "      <td>9</td>\n",
       "      <td>6</td>\n",
       "      <td>3597</td>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>524931</td>\n",
       "      <td>6535</td>\n",
       "      <td>2004-02-07</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>18</td>\n",
       "      <td>2</td>\n",
       "      <td>2004</td>\n",
       "      <td>6</td>\n",
       "      <td>14</td>\n",
       "      <td>8</td>\n",
       "      <td>1882</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>521364</td>\n",
       "      <td>6529</td>\n",
       "      <td>2006-02-28</td>\n",
       "      <td>15</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>1.0</td>\n",
       "      <td>70.0</td>\n",
       "      <td>...</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>2006</td>\n",
       "      <td>5</td>\n",
       "      <td>18</td>\n",
       "      <td>1</td>\n",
       "      <td>3823</td>\n",
       "      <td>23</td>\n",
       "      <td>23</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110522</th>\n",
       "      <td>507261</td>\n",
       "      <td>6525</td>\n",
       "      <td>2006-04-13</td>\n",
       "      <td>12</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>17</td>\n",
       "      <td>4</td>\n",
       "      <td>2006</td>\n",
       "      <td>5</td>\n",
       "      <td>18</td>\n",
       "      <td>2</td>\n",
       "      <td>166</td>\n",
       "      <td>26</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110523</th>\n",
       "      <td>513607</td>\n",
       "      <td>6551</td>\n",
       "      <td>2006-11-03</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>18</td>\n",
       "      <td>11</td>\n",
       "      <td>2006</td>\n",
       "      <td>8</td>\n",
       "      <td>18</td>\n",
       "      <td>8</td>\n",
       "      <td>2180</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110524</th>\n",
       "      <td>498160</td>\n",
       "      <td>6584</td>\n",
       "      <td>2006-06-17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>9</td>\n",
       "      <td>8</td>\n",
       "      <td>2006</td>\n",
       "      <td>9</td>\n",
       "      <td>18</td>\n",
       "      <td>3</td>\n",
       "      <td>3041</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110525</th>\n",
       "      <td>502444</td>\n",
       "      <td>6567</td>\n",
       "      <td>2007-01-13</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>2007</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>5</td>\n",
       "      <td>2441</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110526</th>\n",
       "      <td>523811</td>\n",
       "      <td>6584</td>\n",
       "      <td>2006-06-16</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>69.0</td>\n",
       "      <td>...</td>\n",
       "      <td>9</td>\n",
       "      <td>8</td>\n",
       "      <td>2006</td>\n",
       "      <td>9</td>\n",
       "      <td>18</td>\n",
       "      <td>3</td>\n",
       "      <td>3041</td>\n",
       "      <td>14</td>\n",
       "      <td>14</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>110527 rows × 55 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Patient_ID  Health_Camp_ID Registration_Date  Var1  Var2  Var3  Var4  \\\n",
       "0           489652            6578        2005-09-10     4     0     0     0   \n",
       "1           507246            6578        2005-08-18    45     5     0     0   \n",
       "2           523729            6534        2006-04-29     0     0     0     0   \n",
       "3           524931            6535        2004-02-07     0     0     0     0   \n",
       "4           521364            6529        2006-02-28    15     1     0     0   \n",
       "...            ...             ...               ...   ...   ...   ...   ...   \n",
       "110522      507261            6525        2006-04-13    12     2     0     0   \n",
       "110523      513607            6551        2006-11-03     0     0     0     0   \n",
       "110524      498160            6584        2006-06-17     0     0     0     0   \n",
       "110525      502444            6567        2007-01-13     0     0     0     0   \n",
       "110526      523811            6584        2006-06-16     4     3     0     2   \n",
       "\n",
       "        Var5  Income  Education_Score  ...  CS_Edays CS_Emonths CS_Eyear  \\\n",
       "0          2     NaN              NaN  ...        14         10     2005   \n",
       "1          7     1.0             75.0  ...        14         10     2005   \n",
       "2          0     NaN              NaN  ...         7         11     2007   \n",
       "3          0     NaN              NaN  ...        18          2     2004   \n",
       "4          7     1.0             70.0  ...         3          4     2006   \n",
       "...      ...     ...              ...  ...       ...        ...      ...   \n",
       "110522     6     1.0              NaN  ...        17          4     2006   \n",
       "110523     0     NaN              NaN  ...        18         11     2006   \n",
       "110524     0     NaN              NaN  ...         9          8     2006   \n",
       "110525     0     NaN              NaN  ...         4          2     2007   \n",
       "110526     4     1.0             69.0  ...         9          8     2006   \n",
       "\n",
       "       HC_EM  HC_EYR  HC_ED  Patients_in_HC  HC_For_Patients  \\\n",
       "0          5      19      4            2837               11   \n",
       "1          5      19      4            2837               26   \n",
       "2          8       9      6            3597                7   \n",
       "3          6      14      8            1882                6   \n",
       "4          5      18      1            3823               23   \n",
       "...      ...     ...    ...             ...              ...   \n",
       "110522     5      18      2             166               26   \n",
       "110523     8      18      8            2180                3   \n",
       "110524     9      18      3            3041               16   \n",
       "110525     6       9      5            2441                5   \n",
       "110526     9      18      3            3041               14   \n",
       "\n",
       "        HCC_For_Patients  Target  \n",
       "0                     11       1  \n",
       "1                     26       0  \n",
       "2                      7       1  \n",
       "3                      6       0  \n",
       "4                     23       1  \n",
       "...                  ...     ...  \n",
       "110522                26       0  \n",
       "110523                 3       0  \n",
       "110524                16       0  \n",
       "110525                 5       0  \n",
       "110526                14       0  \n",
       "\n",
       "[110527 rows x 55 columns]"
      ]
     },
     "execution_count": 165,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combined"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Dropping the columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Patient_ID', 'Health_Camp_ID', 'Registration_Date', 'Var1', 'Var2',\n",
       "       'Var3', 'Var4', 'Var5', 'Income', 'Education_Score', 'Age',\n",
       "       'First_Interaction', 'City_Type', 'Employer_Category', 'Donation',\n",
       "       'Health_Score', 'Unnamed: 4', 'Health Score', 'Number_of_stall_visited',\n",
       "       'Last_Stall_Visited_Number', 'Camp_Start_Date', 'Camp_End_Date',\n",
       "       'Category1', 'Category2', 'Category3', 'Interaction_days',\n",
       "       'Camp_duration', 'Magic_1', 'Active_connect', 'Waiting_period',\n",
       "       'Magic_2', 'Digital_marketing', 'comm_seq', 'Regn_day', 'Regn_month',\n",
       "       'Regn_year', 'Per_month_regn', 'Per_year_regn', 'Per_day_regn',\n",
       "       'CS_days', 'CS_months', 'CS_year', 'HC_PM', 'HC_year', 'HC_days',\n",
       "       'CS_Edays', 'CS_Emonths', 'CS_Eyear', 'HC_EM', 'HC_EYR', 'HC_ED',\n",
       "       'Patients_in_HC', 'HC_For_Patients', 'HCC_For_Patients', 'Target'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 166,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combined.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {},
   "outputs": [],
   "source": [
    "new=combined.drop([\"Health_Score\",\"Unnamed: 4\",\"Health Score\",\"Number_of_stall_visited\",\"Last_Stall_Visited_Number\",\n",
    "                  \"Camp_Start_Date\",\"Camp_End_Date\",\"Registration_Date\",\"First_Interaction\"],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(110527, 46)"
      ]
     },
     "execution_count": 168,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "## plotting the target variable\n",
    "new.Target.value_counts().plot(kind=\"bar\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Patient_ID</th>\n",
       "      <th>Health_Camp_ID</th>\n",
       "      <th>Registration_Date</th>\n",
       "      <th>Var1</th>\n",
       "      <th>Var2</th>\n",
       "      <th>Var3</th>\n",
       "      <th>Var4</th>\n",
       "      <th>Var5</th>\n",
       "      <th>Income</th>\n",
       "      <th>Education_Score</th>\n",
       "      <th>...</th>\n",
       "      <th>CS_Edays</th>\n",
       "      <th>CS_Emonths</th>\n",
       "      <th>CS_Eyear</th>\n",
       "      <th>HC_EM</th>\n",
       "      <th>HC_EYR</th>\n",
       "      <th>HC_ED</th>\n",
       "      <th>Patients_in_HC</th>\n",
       "      <th>HC_For_Patients</th>\n",
       "      <th>HCC_For_Patients</th>\n",
       "      <th>Target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>489652</td>\n",
       "      <td>6578</td>\n",
       "      <td>2005-09-10</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>14</td>\n",
       "      <td>10</td>\n",
       "      <td>2005</td>\n",
       "      <td>5</td>\n",
       "      <td>19</td>\n",
       "      <td>4</td>\n",
       "      <td>2837</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>507246</td>\n",
       "      <td>6578</td>\n",
       "      <td>2005-08-18</td>\n",
       "      <td>45</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>1.0</td>\n",
       "      <td>75.0</td>\n",
       "      <td>...</td>\n",
       "      <td>14</td>\n",
       "      <td>10</td>\n",
       "      <td>2005</td>\n",
       "      <td>5</td>\n",
       "      <td>19</td>\n",
       "      <td>4</td>\n",
       "      <td>2837</td>\n",
       "      <td>26</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>523729</td>\n",
       "      <td>6534</td>\n",
       "      <td>2006-04-29</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>7</td>\n",
       "      <td>11</td>\n",
       "      <td>2007</td>\n",
       "      <td>8</td>\n",
       "      <td>9</td>\n",
       "      <td>6</td>\n",
       "      <td>3597</td>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>524931</td>\n",
       "      <td>6535</td>\n",
       "      <td>2004-02-07</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>18</td>\n",
       "      <td>2</td>\n",
       "      <td>2004</td>\n",
       "      <td>6</td>\n",
       "      <td>14</td>\n",
       "      <td>8</td>\n",
       "      <td>1882</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>521364</td>\n",
       "      <td>6529</td>\n",
       "      <td>2006-02-28</td>\n",
       "      <td>15</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>1.0</td>\n",
       "      <td>70.0</td>\n",
       "      <td>...</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>2006</td>\n",
       "      <td>5</td>\n",
       "      <td>18</td>\n",
       "      <td>1</td>\n",
       "      <td>3823</td>\n",
       "      <td>23</td>\n",
       "      <td>23</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 55 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Patient_ID  Health_Camp_ID Registration_Date  Var1  Var2  Var3  Var4  Var5  \\\n",
       "0      489652            6578        2005-09-10     4     0     0     0     2   \n",
       "1      507246            6578        2005-08-18    45     5     0     0     7   \n",
       "2      523729            6534        2006-04-29     0     0     0     0     0   \n",
       "3      524931            6535        2004-02-07     0     0     0     0     0   \n",
       "4      521364            6529        2006-02-28    15     1     0     0     7   \n",
       "\n",
       "   Income  Education_Score  ...  CS_Edays CS_Emonths CS_Eyear HC_EM  HC_EYR  \\\n",
       "0     NaN              NaN  ...        14         10     2005     5      19   \n",
       "1     1.0             75.0  ...        14         10     2005     5      19   \n",
       "2     NaN              NaN  ...         7         11     2007     8       9   \n",
       "3     NaN              NaN  ...        18          2     2004     6      14   \n",
       "4     1.0             70.0  ...         3          4     2006     5      18   \n",
       "\n",
       "   HC_ED  Patients_in_HC  HC_For_Patients  HCC_For_Patients  Target  \n",
       "0      4            2837               11                11       1  \n",
       "1      4            2837               26                26       0  \n",
       "2      6            3597                7                 7       1  \n",
       "3      8            1882                6                 6       0  \n",
       "4      1            3823               23                23       1  \n",
       "\n",
       "[5 rows x 55 columns]"
      ]
     },
     "execution_count": 170,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combined.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "check if there is any relation between category and target variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Category1:pvalue=0.0\n",
      "Category2:pvalue=0.0\n",
      "Category3:pvalue=0.0003699935082811573\n"
     ]
    }
   ],
   "source": [
    "import scipy.stats as stats\n",
    "\n",
    "cats=[\"Category1\",\"Category2\",\"Category3\"]\n",
    "for i in cats:\n",
    "    tbl=pd.crosstab(new.loc[:,i],new.Target)\n",
    "    teststats,pvalue,dof,exp=stats.chi2_contingency(tbl)\n",
    "    print(f\"{i}:pvalue={pvalue}\")\n",
    "    \n",
    "##All three categories are significant"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Health camp as per category2\n",
    "new[\"Magic_3\"]=new.groupby(\"Category2\")[\"Health_Camp_ID\"].transform(\"nunique\")\n",
    "\n",
    "## Health camp as per category3\n",
    "new[\"Magic_4\"]=new.groupby(\"Category3\")[\"Health_Camp_ID\"].transform(\"nunique\")\n",
    "\n",
    "## Health camp as per category1\n",
    "new[\"Magic_5\"]=new.groupby(\"Category1\")[\"Health_Camp_ID\"].transform(\"nunique\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "metadata": {},
   "outputs": [],
   "source": [
    "##patients\n",
    "#patient as per category1\n",
    "new[\"Magic_6\"]=new.groupby(\"Category1\")[\"Patient_ID\"].transform(\"nunique\")\n",
    "\n",
    "#patient as per category2\n",
    "new[\"Magic_7\"]=new.groupby(\"Category2\")[\"Patient_ID\"].transform(\"nunique\")\n",
    "\n",
    "#patient as per category3\n",
    "new[\"Magic_8\"]=new.groupby(\"Category3\")[\"Patient_ID\"].transform(\"nunique\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "metadata": {},
   "outputs": [],
   "source": [
    "##Dealing with categories  3converting categories to number(0,1,2...)\n",
    "new[\"Category1\"]=pd.factorize(new.Category1)[0]\n",
    "new[\"Category2\"]=pd.factorize(new.Category2)[0]\n",
    "new[\"Category3\"]=pd.factorize(new.Category3)[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Var1:pvalue=6.838846288318903e-53\n",
      "Var2:pvalue=3.787050514205907e-32\n",
      "Var3:pvalue=0.006578836766342621\n",
      "Var4:pvalue=0.012219232918294775\n",
      "Var5:pvalue=2.7350892211054794e-63\n"
     ]
    }
   ],
   "source": [
    "## checking significance of variable 1 to 5\n",
    "cats=[\"Var1\",\"Var2\",\"Var3\",\"Var4\",\"Var5\"]\n",
    "for i in cats:\n",
    "    tbl=pd.crosstab(new.loc[:,i],new.Target)\n",
    "    teststats,pvalue,dof,exp=stats.chi2_contingency(tbl)\n",
    "    print(f\"{i}:pvalue={pvalue}\")\n",
    "\n",
    "## inference\n",
    "#every variables is significant\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "metadata": {},
   "outputs": [],
   "source": [
    "##converting negative days to positive\n",
    "new[\"Magic_1\"]=np.abs(new[\"Magic_1\"])\n",
    "new[\"Waiting_period\"]=np.abs(new[\"Waiting_period\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [],
   "source": [
    "## converting employer category to numerical values and filling the missing values\n",
    "new[\"Employer_Category\"]=pd.factorize(new.Employer_Category)[0]\n",
    "new[\"City_Type\"]=pd.factorize(new.City_Type)[0]\n",
    "new[\"Education_Score\"]=pd.factorize(new.Education_Score)[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "metadata": {},
   "outputs": [],
   "source": [
    "## filling missing values in age by median\n",
    "new.Age.fillna(new.Age.median(),inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "metadata": {},
   "outputs": [],
   "source": [
    "## filling missing values of income by median\n",
    "new.Income.fillna(new.Income.median(),inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Dropping the columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Patient_ID', 'Health_Camp_ID', 'Var1', 'Var2', 'Var3', 'Var4', 'Var5',\n",
       "       'Income', 'Education_Score', 'Age', 'City_Type', 'Employer_Category',\n",
       "       'Donation', 'Category1', 'Category2', 'Category3', 'Interaction_days',\n",
       "       'Camp_duration', 'Magic_1', 'Active_connect', 'Waiting_period',\n",
       "       'Magic_2', 'Digital_marketing', 'comm_seq', 'Regn_day', 'Regn_month',\n",
       "       'Regn_year', 'Per_month_regn', 'Per_year_regn', 'Per_day_regn',\n",
       "       'CS_days', 'CS_months', 'CS_year', 'HC_PM', 'HC_year', 'HC_days',\n",
       "       'CS_Edays', 'CS_Emonths', 'CS_Eyear', 'HC_EM', 'HC_EYR', 'HC_ED',\n",
       "       'Patients_in_HC', 'HC_For_Patients', 'HCC_For_Patients', 'Target',\n",
       "       'Magic_3', 'Magic_4', 'Magic_5', 'Magic_6', 'Magic_7', 'Magic_8'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 180,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "metadata": {},
   "outputs": [],
   "source": [
    "new.drop([\"Donation\",\"Regn_day\",\"Regn_month\",\"Regn_year\",\"CS_days\",\"CS_months\",\"CS_year\",\"CS_Edays\",\n",
    "         \"CS_Emonths\",\"CS_Eyear\",\"Patient_ID\",\"Health_Camp_ID\"],axis=1,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Var1', 'Var2', 'Var3', 'Var4', 'Var5', 'Income', 'Education_Score',\n",
       "       'Age', 'City_Type', 'Employer_Category', 'Category1', 'Category2',\n",
       "       'Category3', 'Interaction_days', 'Camp_duration', 'Magic_1',\n",
       "       'Active_connect', 'Waiting_period', 'Magic_2', 'Digital_marketing',\n",
       "       'comm_seq', 'Per_month_regn', 'Per_year_regn', 'Per_day_regn', 'HC_PM',\n",
       "       'HC_year', 'HC_days', 'HC_EM', 'HC_EYR', 'HC_ED', 'Patients_in_HC',\n",
       "       'HC_For_Patients', 'HCC_For_Patients', 'Target', 'Magic_3', 'Magic_4',\n",
       "       'Magic_5', 'Magic_6', 'Magic_7', 'Magic_8'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 182,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Interaction_days', 'Magic_1', 'Magic_2', 'Per_month_regn',\n",
       "       'Per_year_regn', 'Per_day_regn'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 183,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "##missing values\n",
    "new.isnull().sum()[new.isnull().sum()!=0].index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "metadata": {},
   "outputs": [],
   "source": [
    "##filling the missing values\n",
    "missed=['Interaction_days', 'Magic_1', 'Magic_2', 'Per_month_regn',\n",
    "       'Per_year_regn', 'Per_day_regn']\n",
    "\n",
    "for i in missed:\n",
    "    new[i].fillna(new[i].median(),inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Checking the standard deviation of each columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Var1</th>\n",
       "      <td>110527.0</td>\n",
       "      <td>0.803505</td>\n",
       "      <td>7.847266</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>344.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Var2</th>\n",
       "      <td>110527.0</td>\n",
       "      <td>0.243262</td>\n",
       "      <td>3.839489</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>181.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Var3</th>\n",
       "      <td>110527.0</td>\n",
       "      <td>0.000443</td>\n",
       "      <td>0.021051</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Var4</th>\n",
       "      <td>110527.0</td>\n",
       "      <td>0.028617</td>\n",
       "      <td>0.224176</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Var5</th>\n",
       "      <td>110527.0</td>\n",
       "      <td>0.251504</td>\n",
       "      <td>1.245794</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>34.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Income</th>\n",
       "      <td>110527.0</td>\n",
       "      <td>1.059216</td>\n",
       "      <td>0.715125</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Education_Score</th>\n",
       "      <td>110527.0</td>\n",
       "      <td>2.159997</td>\n",
       "      <td>14.958569</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>226.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Age</th>\n",
       "      <td>110527.0</td>\n",
       "      <td>45.241452</td>\n",
       "      <td>6.777901</td>\n",
       "      <td>30.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>80.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>City_Type</th>\n",
       "      <td>110527.0</td>\n",
       "      <td>1.870891</td>\n",
       "      <td>3.071445</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Employer_Category</th>\n",
       "      <td>110527.0</td>\n",
       "      <td>-0.203860</td>\n",
       "      <td>2.237113</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>13.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Category1</th>\n",
       "      <td>110527.0</td>\n",
       "      <td>1.362717</td>\n",
       "      <td>0.785540</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Category2</th>\n",
       "      <td>110527.0</td>\n",
       "      <td>2.006641</td>\n",
       "      <td>1.434594</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Category3</th>\n",
       "      <td>110527.0</td>\n",
       "      <td>0.003682</td>\n",
       "      <td>0.060571</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Interaction_days</th>\n",
       "      <td>110527.0</td>\n",
       "      <td>248.596958</td>\n",
       "      <td>325.670686</td>\n",
       "      <td>0.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>77.0</td>\n",
       "      <td>418.0</td>\n",
       "      <td>1543.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Camp_duration</th>\n",
       "      <td>110527.0</td>\n",
       "      <td>176.530024</td>\n",
       "      <td>259.249898</td>\n",
       "      <td>2.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>39.0</td>\n",
       "      <td>190.0</td>\n",
       "      <td>771.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Magic_1</th>\n",
       "      <td>110527.0</td>\n",
       "      <td>66.812752</td>\n",
       "      <td>95.426873</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>32.0</td>\n",
       "      <td>71.0</td>\n",
       "      <td>500.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Active_connect</th>\n",
       "      <td>110527.0</td>\n",
       "      <td>382.925511</td>\n",
       "      <td>376.977615</td>\n",
       "      <td>0.0</td>\n",
       "      <td>68.0</td>\n",
       "      <td>266.0</td>\n",
       "      <td>597.0</td>\n",
       "      <td>1842.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Waiting_period</th>\n",
       "      <td>110527.0</td>\n",
       "      <td>270.993983</td>\n",
       "      <td>304.946433</td>\n",
       "      <td>0.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>152.0</td>\n",
       "      <td>407.0</td>\n",
       "      <td>1554.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Magic_2</th>\n",
       "      <td>110527.0</td>\n",
       "      <td>134.287676</td>\n",
       "      <td>190.812799</td>\n",
       "      <td>0.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>52.0</td>\n",
       "      <td>128.0</td>\n",
       "      <td>769.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Digital_marketing</th>\n",
       "      <td>110527.0</td>\n",
       "      <td>0.223258</td>\n",
       "      <td>0.721696</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>comm_seq</th>\n",
       "      <td>110527.0</td>\n",
       "      <td>0.413718</td>\n",
       "      <td>0.492501</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Per_month_regn</th>\n",
       "      <td>110527.0</td>\n",
       "      <td>5868.662987</td>\n",
       "      <td>636.529800</td>\n",
       "      <td>4785.0</td>\n",
       "      <td>5097.0</td>\n",
       "      <td>5996.0</td>\n",
       "      <td>6412.0</td>\n",
       "      <td>6755.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Per_year_regn</th>\n",
       "      <td>110527.0</td>\n",
       "      <td>15421.211414</td>\n",
       "      <td>4772.154002</td>\n",
       "      <td>2099.0</td>\n",
       "      <td>15710.0</td>\n",
       "      <td>15710.0</td>\n",
       "      <td>19318.0</td>\n",
       "      <td>19318.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Per_day_regn</th>\n",
       "      <td>110527.0</td>\n",
       "      <td>2789.283189</td>\n",
       "      <td>343.727746</td>\n",
       "      <td>2199.0</td>\n",
       "      <td>2518.0</td>\n",
       "      <td>2721.0</td>\n",
       "      <td>2870.0</td>\n",
       "      <td>3620.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>HC_PM</th>\n",
       "      <td>110527.0</td>\n",
       "      <td>6.366526</td>\n",
       "      <td>2.244704</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>10.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>HC_year</th>\n",
       "      <td>110527.0</td>\n",
       "      <td>18.292734</td>\n",
       "      <td>3.893233</td>\n",
       "      <td>2.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>21.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>HC_days</th>\n",
       "      <td>110527.0</td>\n",
       "      <td>3.611018</td>\n",
       "      <td>2.029721</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>HC_EM</th>\n",
       "      <td>110527.0</td>\n",
       "      <td>6.277326</td>\n",
       "      <td>1.879279</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>9.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>HC_EYR</th>\n",
       "      <td>110527.0</td>\n",
       "      <td>15.789020</td>\n",
       "      <td>4.269820</td>\n",
       "      <td>5.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>19.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>HC_ED</th>\n",
       "      <td>110527.0</td>\n",
       "      <td>3.873470</td>\n",
       "      <td>2.334168</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Patients_in_HC</th>\n",
       "      <td>110527.0</td>\n",
       "      <td>2904.425480</td>\n",
       "      <td>1330.060994</td>\n",
       "      <td>44.0</td>\n",
       "      <td>1993.0</td>\n",
       "      <td>2763.0</td>\n",
       "      <td>3809.0</td>\n",
       "      <td>6543.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>HC_For_Patients</th>\n",
       "      <td>110527.0</td>\n",
       "      <td>7.501036</td>\n",
       "      <td>6.888289</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>40.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>HCC_For_Patients</th>\n",
       "      <td>110527.0</td>\n",
       "      <td>7.501036</td>\n",
       "      <td>6.888289</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>40.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Target</th>\n",
       "      <td>110527.0</td>\n",
       "      <td>0.185783</td>\n",
       "      <td>0.388933</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Magic_3</th>\n",
       "      <td>110527.0</td>\n",
       "      <td>10.505759</td>\n",
       "      <td>3.608709</td>\n",
       "      <td>2.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>16.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Magic_4</th>\n",
       "      <td>110527.0</td>\n",
       "      <td>61.782741</td>\n",
       "      <td>3.573682</td>\n",
       "      <td>3.0</td>\n",
       "      <td>62.0</td>\n",
       "      <td>62.0</td>\n",
       "      <td>62.0</td>\n",
       "      <td>62.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Magic_5</th>\n",
       "      <td>110527.0</td>\n",
       "      <td>29.144291</td>\n",
       "      <td>16.616539</td>\n",
       "      <td>10.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>44.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Magic_6</th>\n",
       "      <td>110527.0</td>\n",
       "      <td>21664.434301</td>\n",
       "      <td>6310.628932</td>\n",
       "      <td>13614.0</td>\n",
       "      <td>15426.0</td>\n",
       "      <td>27282.0</td>\n",
       "      <td>27282.0</td>\n",
       "      <td>27282.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Magic_7</th>\n",
       "      <td>110527.0</td>\n",
       "      <td>13578.317660</td>\n",
       "      <td>3619.506762</td>\n",
       "      <td>2213.0</td>\n",
       "      <td>11415.0</td>\n",
       "      <td>15397.0</td>\n",
       "      <td>16997.0</td>\n",
       "      <td>16997.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Magic_8</th>\n",
       "      <td>110527.0</td>\n",
       "      <td>36393.974812</td>\n",
       "      <td>2188.123065</td>\n",
       "      <td>402.0</td>\n",
       "      <td>36527.0</td>\n",
       "      <td>36527.0</td>\n",
       "      <td>36527.0</td>\n",
       "      <td>36527.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      count          mean          std      min      25%  \\\n",
       "Var1               110527.0      0.803505     7.847266      0.0      0.0   \n",
       "Var2               110527.0      0.243262     3.839489      0.0      0.0   \n",
       "Var3               110527.0      0.000443     0.021051      0.0      0.0   \n",
       "Var4               110527.0      0.028617     0.224176      0.0      0.0   \n",
       "Var5               110527.0      0.251504     1.245794      0.0      0.0   \n",
       "Income             110527.0      1.059216     0.715125      0.0      1.0   \n",
       "Education_Score    110527.0      2.159997    14.958569     -1.0     -1.0   \n",
       "Age                110527.0     45.241452     6.777901     30.0     44.0   \n",
       "City_Type          110527.0      1.870891     3.071445     -1.0     -1.0   \n",
       "Employer_Category  110527.0     -0.203860     2.237113     -1.0     -1.0   \n",
       "Category1          110527.0      1.362717     0.785540      0.0      1.0   \n",
       "Category2          110527.0      2.006641     1.434594      0.0      1.0   \n",
       "Category3          110527.0      0.003682     0.060571      0.0      0.0   \n",
       "Interaction_days   110527.0    248.596958   325.670686      0.0      8.0   \n",
       "Camp_duration      110527.0    176.530024   259.249898      2.0      7.0   \n",
       "Magic_1            110527.0     66.812752    95.426873      0.0      7.0   \n",
       "Active_connect     110527.0    382.925511   376.977615      0.0     68.0   \n",
       "Waiting_period     110527.0    270.993983   304.946433      0.0     38.0   \n",
       "Magic_2            110527.0    134.287676   190.812799      0.0     19.0   \n",
       "Digital_marketing  110527.0      0.223258     0.721696      0.0      0.0   \n",
       "comm_seq           110527.0      0.413718     0.492501      0.0      0.0   \n",
       "Per_month_regn     110527.0   5868.662987   636.529800   4785.0   5097.0   \n",
       "Per_year_regn      110527.0  15421.211414  4772.154002   2099.0  15710.0   \n",
       "Per_day_regn       110527.0   2789.283189   343.727746   2199.0   2518.0   \n",
       "HC_PM              110527.0      6.366526     2.244704      1.0      5.0   \n",
       "HC_year            110527.0     18.292734     3.893233      2.0     19.0   \n",
       "HC_days            110527.0      3.611018     2.029721      1.0      2.0   \n",
       "HC_EM              110527.0      6.277326     1.879279      3.0      5.0   \n",
       "HC_EYR             110527.0     15.789020     4.269820      5.0     14.0   \n",
       "HC_ED              110527.0      3.873470     2.334168      1.0      2.0   \n",
       "Patients_in_HC     110527.0   2904.425480  1330.060994     44.0   1993.0   \n",
       "HC_For_Patients    110527.0      7.501036     6.888289      1.0      2.0   \n",
       "HCC_For_Patients   110527.0      7.501036     6.888289      1.0      2.0   \n",
       "Target             110527.0      0.185783     0.388933      0.0      0.0   \n",
       "Magic_3            110527.0     10.505759     3.608709      2.0      7.0   \n",
       "Magic_4            110527.0     61.782741     3.573682      3.0     62.0   \n",
       "Magic_5            110527.0     29.144291    16.616539     10.0     11.0   \n",
       "Magic_6            110527.0  21664.434301  6310.628932  13614.0  15426.0   \n",
       "Magic_7            110527.0  13578.317660  3619.506762   2213.0  11415.0   \n",
       "Magic_8            110527.0  36393.974812  2188.123065    402.0  36527.0   \n",
       "\n",
       "                       50%      75%      max  \n",
       "Var1                   0.0      0.0    344.0  \n",
       "Var2                   0.0      0.0    181.0  \n",
       "Var3                   0.0      0.0      1.0  \n",
       "Var4                   0.0      0.0      8.0  \n",
       "Var5                   0.0      0.0     34.0  \n",
       "Income                 1.0      1.0      6.0  \n",
       "Education_Score       -1.0     -1.0    226.0  \n",
       "Age                   44.0     44.0     80.0  \n",
       "City_Type              1.0      4.0      8.0  \n",
       "Employer_Category     -1.0     -1.0     13.0  \n",
       "Category1              2.0      2.0      2.0  \n",
       "Category2              2.0      3.0      6.0  \n",
       "Category3              0.0      0.0      1.0  \n",
       "Interaction_days      77.0    418.0   1543.0  \n",
       "Camp_duration         39.0    190.0    771.0  \n",
       "Magic_1               32.0     71.0    500.0  \n",
       "Active_connect       266.0    597.0   1842.0  \n",
       "Waiting_period       152.0    407.0   1554.0  \n",
       "Magic_2               52.0    128.0    769.0  \n",
       "Digital_marketing      0.0      0.0      4.0  \n",
       "comm_seq               0.0      1.0      1.0  \n",
       "Per_month_regn      5996.0   6412.0   6755.0  \n",
       "Per_year_regn      15710.0  19318.0  19318.0  \n",
       "Per_day_regn        2721.0   2870.0   3620.0  \n",
       "HC_PM                  6.0      8.0     10.0  \n",
       "HC_year               19.0     21.0     21.0  \n",
       "HC_days                3.0      4.0      8.0  \n",
       "HC_EM                  6.0      8.0      9.0  \n",
       "HC_EYR                18.0     19.0     19.0  \n",
       "HC_ED                  3.0      6.0      8.0  \n",
       "Patients_in_HC      2763.0   3809.0   6543.0  \n",
       "HC_For_Patients        5.0     11.0     40.0  \n",
       "HCC_For_Patients       5.0     11.0     40.0  \n",
       "Target                 0.0      0.0      1.0  \n",
       "Magic_3               11.0     15.0     16.0  \n",
       "Magic_4               62.0     62.0     62.0  \n",
       "Magic_5               44.0     44.0     44.0  \n",
       "Magic_6            27282.0  27282.0  27282.0  \n",
       "Magic_7            15397.0  16997.0  16997.0  \n",
       "Magic_8            36527.0  36527.0  36527.0  "
      ]
     },
     "execution_count": 185,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new.describe().T"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "MODELLING"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Splitting the data inti newtrain and newtest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((75278, 40), (35249, 39), (75278, 8), (35249, 8))"
      ]
     },
     "execution_count": 186,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "newtrain=new.loc[0:train.shape[0]-1,:]\n",
    "newtest=new.loc[train.shape[0]:,:]\n",
    "\n",
    "##dropping the target variable\n",
    "newtest.drop(\"Target\",axis=1,inplace=True)\n",
    "\n",
    "##shapes\n",
    "newtrain.shape,newtest.shape,train.shape,test.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "SMOTE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "metadata": {},
   "outputs": [],
   "source": [
    "from imblearn.over_sampling import SMOTE\n",
    "\n",
    "x=newtrain.drop(\"Target\",axis=1)\n",
    "y=newtrain.Target\n",
    "\n",
    "smote=SMOTE(sampling_strategy=\"minority\",random_state=0)\n",
    "smote_x,smote_y=smote.fit_resample(x,y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1) Model-1 Decision Tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.model_selection import StratifiedKFold\n",
    "\n",
    "kfold=StratifiedKFold(n_splits=5,shuffle=True,random_state=0)\n",
    "\n",
    "dtree=DecisionTreeClassifier(random_state=0)\n",
    "\n",
    "tree_pred=[]\n",
    "\n",
    "##Cross validation\n",
    "\n",
    "\n",
    "for train_index,test_index in kfold.split(smote_x,smote_y):\n",
    "    x_train=smote_x.iloc[train_index]\n",
    "    y_train=smote_y.iloc[train_index]\n",
    "    tree_pred.append(dtree.fit(x_train,y_train).predict_proba(newtest)) #0.6027"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "metadata": {},
   "outputs": [],
   "source": [
    "submission=pd.read_csv(r\"/Users/vivekrajashekaran/Downloads/sample_submmission.csv\")\n",
    "submission[\"Outcome\"]=pd.DataFrame(np.array(tree_pred[0]))[1]\n",
    "submission.to_csv(\"/Users/vivekrajashekaran/Documents/projects/ML_models/Medical_Camp/Decision_Tree.csv\",index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2) Model-2 Random Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier,GradientBoostingClassifier\n",
    "from sklearn.model_selection import StratifiedKFold\n",
    "\n",
    "kfold=StratifiedKFold(n_splits=5,shuffle=True,random_state=0)\n",
    "\n",
    "rf=RandomForestClassifier(random_state=0)\n",
    "\n",
    "rf_pred=[]\n",
    "\n",
    "##Cross validation\n",
    "\n",
    "\n",
    "for train_index,test_index in kfold.split(smote_x,smote_y):\n",
    "    x_train=smote_x.iloc[train_index]\n",
    "    y_train=smote_y.iloc[train_index]\n",
    "    rf_pred.append(rf.fit(x_train,y_train).predict_proba(newtest)) #0.7460"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "metadata": {},
   "outputs": [],
   "source": [
    "submission=pd.read_csv(r\"/Users/vivekrajashekaran/Downloads/sample_submmission.csv\")\n",
    "submission[\"Outcome\"]=pd.DataFrame(np.array(rf_pred[0]))[1]\n",
    "submission.to_csv(\"/Users/vivekrajashekaran/Documents/projects/ML_models/Medical_Camp/Random_forest.csv\",index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3)Model-3 Gradient Boosting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "metadata": {},
   "outputs": [],
   "source": [
    "kfold=StratifiedKFold(n_splits=5,shuffle=True,random_state=0)\n",
    "\n",
    "gb=GradientBoostingClassifier(random_state=0)\n",
    "\n",
    "gb_pred=[]\n",
    "\n",
    "##Cross validation\n",
    "\n",
    "\n",
    "for train_index,test_index in kfold.split(smote_x,smote_y):\n",
    "    x_train=smote_x.iloc[train_index]\n",
    "    y_train=smote_y.iloc[train_index]\n",
    "    gb_pred.append(gb.fit(x_train,y_train).predict_proba(newtest)) #0.7498"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "metadata": {},
   "outputs": [],
   "source": [
    "submission=pd.read_csv(r\"/Users/vivekrajashekaran/Downloads/sample_submmission.csv\")\n",
    "submission[\"Outcome\"]=pd.DataFrame(np.array(gb_pred[0]))[1]\n",
    "submission.to_csv(\"/Users/vivekrajashekaran/Documents/projects/ML_models/Medical_Camp/Gradient_boosting.csv\",index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "4) Model-4 XGBoost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from xgboost import XGBClassifier\n",
    "from sklearn.model_selection import StratifiedKFold\n",
    "\n",
    "kfold = StratifiedKFold(n_splits=5, random_state=0, shuffle=True)\n",
    "\n",
    "xg_pred = []\n",
    "\n",
    "xg = XGBClassifier(random_state=0)\n",
    "for train_index, test_index in kfold.split(smote_x, smote_y):\n",
    "    x_train = smote_x.iloc[train_index]\n",
    "    y_train = smote_y.iloc[train_index]\n",
    "    xg_pred.append(xg.fit(x_train, y_train).predict_proba(newtest)) #0.7430"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "metadata": {},
   "outputs": [],
   "source": [
    "submission=pd.read_csv(r\"/Users/vivekrajashekaran/Downloads/sample_submmission.csv\")\n",
    "submission[\"Outcome\"]=pd.DataFrame(np.array(xg_pred[0]))[1]\n",
    "submission.to_csv(\"/Users/vivekrajashekaran/Documents/projects/ML_models/Medical_Camp/XG_boost.csv\",index=False)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "5) Model-5 Light Gradient boost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Number of positive: 43795, number of negative: 43795\n",
      "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.004113 seconds.\n",
      "You can set `force_row_wise=true` to remove the overhead.\n",
      "And if memory is not enough, you can set `force_col_wise=true`.\n",
      "[LightGBM] [Info] Total Bins 3011\n",
      "[LightGBM] [Info] Number of data points in the train set: 87590, number of used features: 39\n",
      "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n",
      "[LightGBM] [Info] Number of positive: 43795, number of negative: 43795\n",
      "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.004335 seconds.\n",
      "You can set `force_row_wise=true` to remove the overhead.\n",
      "And if memory is not enough, you can set `force_col_wise=true`.\n",
      "[LightGBM] [Info] Total Bins 3018\n",
      "[LightGBM] [Info] Number of data points in the train set: 87590, number of used features: 39\n",
      "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n",
      "[LightGBM] [Info] Number of positive: 43795, number of negative: 43795\n",
      "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.003983 seconds.\n",
      "You can set `force_row_wise=true` to remove the overhead.\n",
      "And if memory is not enough, you can set `force_col_wise=true`.\n",
      "[LightGBM] [Info] Total Bins 3013\n",
      "[LightGBM] [Info] Number of data points in the train set: 87590, number of used features: 38\n",
      "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n",
      "[LightGBM] [Info] Number of positive: 43795, number of negative: 43796\n",
      "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.004842 seconds.\n",
      "You can set `force_row_wise=true` to remove the overhead.\n",
      "And if memory is not enough, you can set `force_col_wise=true`.\n",
      "[LightGBM] [Info] Total Bins 3009\n",
      "[LightGBM] [Info] Number of data points in the train set: 87591, number of used features: 39\n",
      "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.499994 -> initscore=-0.000023\n",
      "[LightGBM] [Info] Start training from score -0.000023\n",
      "[LightGBM] [Info] Number of positive: 43796, number of negative: 43795\n",
      "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.003443 seconds.\n",
      "You can set `force_row_wise=true` to remove the overhead.\n",
      "And if memory is not enough, you can set `force_col_wise=true`.\n",
      "[LightGBM] [Info] Total Bins 3014\n",
      "[LightGBM] [Info] Number of data points in the train set: 87591, number of used features: 39\n",
      "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500006 -> initscore=0.000023\n",
      "[LightGBM] [Info] Start training from score 0.000023\n"
     ]
    }
   ],
   "source": [
    "from lightgbm import LGBMClassifier\n",
    "from sklearn.model_selection import StratifiedKFold\n",
    "\n",
    "kfold = StratifiedKFold(n_splits=5, random_state=0, shuffle=True)\n",
    "\n",
    "lgb_pred = []\n",
    "\n",
    "lg = LGBMClassifier(random_state=0)\n",
    "for train_index, test_index in kfold.split(smote_x, smote_y):\n",
    "    x_train = smote_x.iloc[train_index]\n",
    "    y_train = smote_y.iloc[train_index]\n",
    "    lgb_pred.append(lg.fit(x_train, y_train).predict_proba(newtest)) #0.7568"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "metadata": {},
   "outputs": [],
   "source": [
    "submission=pd.read_csv(r\"/Users/vivekrajashekaran/Downloads/sample_submmission.csv\")\n",
    "submission[\"Outcome\"]=pd.DataFrame(np.array(lgb_pred[0]))[1]\n",
    "submission.to_csv(\"/Users/vivekrajashekaran/Documents/projects/ML_models/Medical_Camp/light_gradient_boost.csv\",index=False)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Model Performance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "            Model  Accuracy\n",
      "0          D_Tree    0.6027\n",
      "1   Random_forest    0.7460\n",
      "2  Gradient_boost    0.7498\n",
      "3        XG_Boost    0.7430\n",
      "4        LG_boost    0.7568\n"
     ]
    }
   ],
   "source": [
    "\n",
    "data = {\n",
    "    \"Model\": [\"D_Tree\", \"Random_forest\", \"Gradient_boost\", \"XG_Boost\", \"LG_boost\"],\n",
    "    \"Accuracy\": [0.6027, 0.7460, 0.7498, 0.7430, 0.7568]\n",
    "}\n",
    "\n",
    "df = pd.DataFrame(data)\n",
    "print(df)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Stacking classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 208,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Number of positive: 43795, number of negative: 43795\n",
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000485 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 765\n",
      "[LightGBM] [Info] Number of data points in the train set: 87590, number of used features: 3\n",
      "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n",
      "[LightGBM] [Info] Number of positive: 43795, number of negative: 43795\n",
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000560 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 765\n",
      "[LightGBM] [Info] Number of data points in the train set: 87590, number of used features: 3\n",
      "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n",
      "[LightGBM] [Info] Number of positive: 43795, number of negative: 43795\n",
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000509 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 765\n",
      "[LightGBM] [Info] Number of data points in the train set: 87590, number of used features: 3\n",
      "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000\n",
      "[LightGBM] [Info] Number of positive: 43795, number of negative: 43796\n",
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000598 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 765\n",
      "[LightGBM] [Info] Number of data points in the train set: 87591, number of used features: 3\n",
      "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.499994 -> initscore=-0.000023\n",
      "[LightGBM] [Info] Start training from score -0.000023\n",
      "[LightGBM] [Info] Number of positive: 43796, number of negative: 43795\n",
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000501 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 765\n",
      "[LightGBM] [Info] Number of data points in the train set: 87591, number of used features: 3\n",
      "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500006 -> initscore=0.000023\n",
      "[LightGBM] [Info] Start training from score 0.000023\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import StackingClassifier\n",
    "\n",
    "#Define base learners as a list of tuples\n",
    "base_learners = [\n",
    "    ('RF', RandomForestClassifier(random_state=0)),\n",
    "    ('GBM', GradientBoostingClassifier(random_state=0)),\n",
    "    ('XG', XGBClassifier(random_state=0))\n",
    "]\n",
    "\n",
    "# Initialize empty list for predictions\n",
    "stack_pred = []\n",
    "\n",
    "# Define the Meta Model\n",
    "meta_model = LGBMClassifier(random_state=0)\n",
    "\n",
    "# Define the Stacking Model\n",
    "stack = StackingClassifier(\n",
    "    estimators=base_learners,\n",
    "    final_estimator=meta_model,\n",
    "    cv=5)\n",
    "\n",
    "# Train and predict\n",
    "for train_index, test_index in kfold.split(smote_x, smote_y):\n",
    "    x_train = smote_x.iloc[train_index]\n",
    "    y_train = smote_y.iloc[train_index]\n",
    "    stack_pred.append(stack.fit(x_train, y_train).predict_proba(newtest))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "metadata": {},
   "outputs": [],
   "source": [
    "submission=pd.read_csv(r\"/Users/vivekrajashekaran/Downloads/sample_submmission.csv\")\n",
    "submission[\"Outcome\"]=pd.DataFrame(np.array(stack_pred[0]))[1]\n",
    "submission.to_csv(\"/Users/vivekrajashekaran/Documents/projects/ML_models/Medical_Camp/stacking _classifier.csv\",index=False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
